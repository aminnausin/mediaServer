services:
    app:
        image: aminnausin/mediaserver:${DOCKER_RELEASE:-latest}
        container_name: MediaServer
        volumes:
            - ./data:/var/www/html/storage/app/public
            - ./logs/mediaServer:/var/www/html/storage/logs
            - ./docker/etc/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
            - ./docker/etc/nginx/nginx.conf:/etc/nginx/nginx.conf
            - .env:/var/www/html/.env
            - ./logs/nginx:/var/log/nginx
        ports:
            - '8086:8086'
        expose:
            - '8086'
        healthcheck:
            test: curl --fail http://${APP_HOST:-app.test}:8086/api/health || exit 1
            interval: 1m30s
            timeout: 30s
            retries: 3
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - .env
        labels:
            caddy: ${APP_HOST:-app.test}
            caddy.reverse_proxy: '* {{upstreams 8086}}'
    queue:
        image: aminnausin/mediaserver:${DOCKER_RELEASE:-latest}
        container_name: job_queue
        command: ['php', '/var/www/html/artisan', 'queue:work', '--tries=3']
        volumes:
            - ./data:/var/www/html/storage/app/public
            - ./logs/mediaServer:/var/www/html/storage/logs
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            - LOG_FILENAME=laravel-queue.log
        env_file:
            - .env
        stop_grace_period: 5s
        stop_signal: SIGTERM
        healthcheck:
            test: ['CMD', 'healthcheck-queue']
            start_period: 10s
    event-queue:
        image: aminnausin/mediaserver:${DOCKER_RELEASE:-latest}
        container_name: event_queue
        command: ['php', '/var/www/html/artisan', 'queue:work', '--queue=high', '--tries=3']
        volumes:
            - ./data:/var/www/html/storage/app/public
            - ./logs/mediaServer:/var/www/html/storage/logs
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            - LOG_FILENAME=laravel-event-queue.log
        env_file:
            - .env
        stop_grace_period: 5s
        stop_signal: SIGTERM
        healthcheck:
            test: ['CMD', 'healthcheck-queue']
    scheduler:
        image: aminnausin/mediaserver:${DOCKER_RELEASE:-latest}
        container_name: laravel_scheduler
        command: ['php', '/var/www/html/artisan', 'schedule:work']
        volumes:
            - ./data:/var/www/html/storage/app/public
            - ./logs/mediaServer:/var/www/html/storage/logs
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            - LOG_FILENAME=laravel-scheduler.log
        env_file:
            - .env
        stop_grace_period: 5s
        stop_signal: SIGTERM
        healthcheck:
            test: ['CMD', 'healthcheck-schedule']
    ws:
        image: aminnausin/mediaserver:${DOCKER_RELEASE:-latest}
        container_name: ws
        command: php artisan reverb:start
        volumes:
            - ./data:/var/www/html/storage/app/public
            - ./logs/mediaServer:/var/www/html/storage/logs
        ports:
            - ${REVERB_PORT:-6001}:${REVERB_PORT:-6001}
        expose:
            - '${REVERB_PORT:-6001}'
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            - LOG_FILENAME=laravel-ws.log
        env_file:
            - .env
        labels:
            caddy: ${APP_HOST:-app.test}
            caddy.reverse_proxy: '* {{upstreams 8086}}'
        stop_grace_period: 5s
        stop_signal: SIGTERM
        healthcheck:
            test: ['CMD', 'healthcheck-schedule']
    caddy:
        image: 'caddy:2.9.1-alpine'
        container_name: caddy
        ports:
            - 80:80
            - 443:443
            - 443:443/udp
        volumes:
            - ./docker/etc/caddy/Caddyfile:/etc/caddy/Caddyfile
            - ./logs/caddy:/var/log/caddy
            - /var/run/docker.sock:/var/run/docker.sock
        restart: unless-stopped
        environment:
            - CADDY_INGRESS_NETWORKS=proxy_network
    postgres:
        image: bitnami/postgresql:17.2.0
        container_name: database
        platform: linux/amd64
        ports:
            - 5432:5432
        restart: always
        volumes:
            - db-data:/bitnami/postgresql
        environment:
            - POSTGRESQL_DATABASE=${DB_DATABASE:-mediaServer}
            - POSTGRESQL_USERNAME=${DB_USERNAME:-postgres}
            - POSTGRESQL_PASSWORD=${DB_PASSWORD:-root}
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME}', '-d', '${DB_DATABASE:-mediaServer}']
            interval: 5s
            timeout: 2s
            retries: 10
volumes:
    db-data:
        driver: local

networks:
    default:
        driver: bridge
