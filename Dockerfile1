# syntax=docker/dockerfile:1

FROM php:8.3.16-fpm-alpine

RUN apk update && apk add --no-cache \
    bash \
    git \
    freetype-dev \
    libjpeg-turbo-dev \
    libpng-dev \
    libwebp-dev \
    libzip-dev \
    oniguruma-dev \
    postgresql-dev \
    nodejs \
    npm \
    ffmpeg \
    exiftool

    # build-base \
    # libpng-dev \
    # libjpeg-turbo-dev \
    # libwebp-dev \
    # libxpm-dev \
    # freetype-dev \
    # libzip-dev \
    # bash \
    # fcgiwrap \
    # oniguruma-dev \
    # postgresql-dev \
    # ffmpeg \
    # exiftool \
    # git \
    # zip \
    # unzip \
    # nodejs \
    # npm

# Install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
    && docker-php-ext-install gd \
    && docker-php-ext-install pdo pdo_pgsql mbstring zip exif pcntl bcmath opcache

# Install Composer
COPY --from=composer/composer:latest-bin /composer /usr/bin/composer

RUN echo "error_reporting = E_ALL & ~E_NOTICE & ~E_DEPRECATED" > /usr/local/etc/php/conf.d/error_reporting.ini

# Copy existing application directory contents
COPY . /var/www/html/

# Set working directory
WORKDIR /var/www/html/

RUN mkdir -p /var/www/html/storage/framework/{sessions,views,cache} && \
    chown -R www-data:www-data /var/www/html/storage/framework && \
    chmod -R 775 /var/www/html/storage/framework

RUN npm i && \
    npm run build-only && \
    npm cache clean --force && \
    rm -rf /root/.npm && \
    rm -rf node_modules
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-scripts --no-progress

USER root

# Copy entrypoint script
COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh

# Set permissions for the entrypoint script
RUN chmod +x /usr/local/bin/entrypoint.sh

# Set ownership and permissions for the /var/www/mediaServer directory to mediaServer
RUN chmod -R 755 /var/www/html/
RUN chown -R www-data:www-data /var/www/

RUN chown -R www-data:www-data /var/www/html/

USER www-data

EXPOSE 9000

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

CMD ["php-fpm"]
