name: CI & Docker Release

on:
  push:
    branches: [ 'dev', 'main' ]
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch

jobs:
  run-tests:
    uses: aminnausin/mediaServer/.github/workflows/tests.yml@dev
  # ==========================
  #  Generate Release Tags
  # ==========================
  get-release-tags:
    name: Generate Release Tags
    runs-on: ubuntu-latest
    needs: [ run-tests ]
    if: success()
    permissions:
      contents: write
    strategy:
      fail-fast: true
    outputs:
      tag: ${{ steps.set_release_info.outputs.TAG }}
      docker-tag: ${{ steps.set_release_info.outputs.DOCKER_TAG}}
      prerelease: ${{ steps.set_release_info.outputs.PRERELEASE }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Ensure VERSION file exists
      run: |
        VERSION_FILE="VERSION"
        if [ ! -f "$VERSION_FILE" ]; then
          echo "0.1.0" > "$VERSION_FILE"
        fi
    - name: Fetch full git history and tags
      run: |
        git fetch --unshallow --tags || git fetch --tags
    - name: Set Release Tag and Prerelease Status
      id: set_release_info
      run: |
        VERSION_FILE="VERSION"
        CURRENT_VERSION=$(cat $VERSION_FILE)
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        PRERELEASE=false
        DOCKER_TAG=""
        TAG=""

        if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then

            #Only increase patch version if merging feature branch to dev
            IS_MERGE=$(git log -1 --pretty=%P | wc -w)
            if [ "$IS_MERGE" -gt 1 ]; then
            	PATCH=$((PATCH + 1))
            fi

            NEW_VERSION="$MAJOR.$MINOR.$PATCH"

            #Increase build number all the time

            LAST_BETA=$(git tag --list "${NEW_VERSION}-beta.[0-9]*" | sed -E "s/.*-beta\.//" | sort -V | tail -n1)
            LAST_BETA=${LAST_BETA:-0}
            BUILD_COUNT=$((LAST_BETA + 1))

            TAG="${NEW_VERSION}-beta.${BUILD_COUNT}"
            DOCKER_TAG="beta"
            PRERELEASE=true
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                INCREMENT="${{ github.event.inputs.bump }}"
                INCREMENT="${INCREMENT:-patch}"

                case $INCREMENT in
                    major)
                    MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
                    minor)
                    MINOR=$((MINOR + 1)); PATCH=0 ;;
                    patch|*)
                    PATCH=$((PATCH + 1)) ;;
                esac

                #just remove minor tags like 'b' when auto releasing to

            fi
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            TAG="$NEW_VERSION"
            DOCKER_TAG="latest"
        fi

        echo "$NEW_VERSION" > $VERSION_FILE

        echo "::notice title=Version Info::Branch: ${{ github.ref }}, Tag: $TAG, Prerelease: $PRERELEASE"

        echo "TAG=$TAG" >> $GITHUB_OUTPUT
        echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_OUTPUT
        echo "PRERELEASE=$PRERELEASE" >> $GITHUB_OUTPUT

    - name: Commit updated VERSION file and manifest
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: 'chore: bump version to ${{ steps.set_release_info.outputs.TAG }}'
        file_pattern: |
          VERSION
    - name: Create and push Git tag
      if: steps.set_release_info.outputs.TAG != ''
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git tag ${{ steps.set_release_info.outputs.TAG }}
        git push origin ${{ steps.set_release_info.outputs.TAG }}
  # ==========================
  #  Publish Docker Image
  # ==========================
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ get-release-tags ]
    permissions:
      contents: write
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Update .env.docker
      run: |
        sed -i "s/DOCKER_RELEASE=.*/DOCKER_RELEASE=${{ needs.get-release-tags.outputs.docker-tag }}/" docker/.env.docker
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Push to Docker Hub
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: |
          aminnausin/mediaserver:${{ needs.get-release-tags.outputs.docker-tag }}
          aminnausin/mediaserver:${{ needs.get-release-tags.outputs.tag }}
  # ==========================
  #  Check for Docker Changes
  # ==========================
  check-docker-changes:
    name: Check for Docker Related File Changes
    needs: [ run-tests ]
    if: needs.run-tests.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      files_changed: ${{ steps.filter.outputs.changes != '[]' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for file changes
      id: filter
      uses: dorny/paths-filter@v2
      with:
        filters: |
          changed:
              - 'docker/**'
              - 'docker-compose.yaml'
              - 'Dockerfile'
              - 'startDocker.*'
              - 'data/**'
              - 'README.md'

  # ==========================
  #  Release Docker Setup Pkg
  # ==========================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ build-docker, check-docker-changes, get-release-tags ]
    if: needs.check-docker-changes.outputs.files_changed == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Zip Files Linux
      run: |
        zip -r mediaServerDockerLinux.zip ./docker/etc ./docker/.env.docker ./docker-compose.yaml ./startDocker.sh ./README.md ./data/*

    - name: Zip Files Windows
      run: |
        zip -r mediaServerDockerWindows.zip ./docker/etc ./docker/.env.docker ./docker-compose.yaml ./startDocker.bat ./README.md ./data/*
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: false
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ needs.get-release-tags.outputs.tag }}
        name: Docker Release - ${{ needs.get-release-tags.outputs.tag }}
        draft: false
        prerelease: ${{ needs.get-release-tags.outputs.prerelease }}
        artifacts: mediaServerDockerLinux.zip,mediaServerDockerWindows.zip
