name: CI & Docker Release

on:
    push:
        branches: ['dev', 'main']
    workflow_dispatch:
        inputs:
            tag:
                description: 'Release Tag'
                required: true

jobs:
    # ==========================
    #  PHP Linting (Laravel Pint)
    # ==========================
    check-php-changes:
        runs-on: ubuntu-latest
        outputs:
            php_changed: ${{ steps.filter.outputs.changes != '[]' }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Detect PHP file changes
              id: filter
              uses: dorny/paths-filter@v2
              with:
                  filters: |
                      php_changed:
                          - '**/*.php'

    laravel-pint:
        needs: [check-php-changes]
        runs-on: ubuntu-latest
        if: needs.check-php-changes.outputs.php_changed == 'true'
        permissions:
            contents: write
        strategy:
            fail-fast: true
            matrix:
                php: [8.4]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: json, dom, curl, libxml, mbstring
                  coverage: none

            - name: Install Pint
              run: composer global require laravel/pint

            - name: Run Pint
              run: pint

            - name: Commit linted files
              uses: stefanzweifel/git-auto-commit-action@v5
              with:
                  commit_message: 'Fixes coding style'

    # ==========================
    #  Laravel Tests
    # ==========================
    laravel-tests:
        needs: [laravel-pint]
        runs-on: ubuntu-latest
        env:
            DB_CONNECTION: pgsql
            DB_HOST: localhost
            DB_PORT: 5432
            DB_PASSWORD: postgres
            DB_USERNAME: postgres
            DB_DATABASE: postgres

        services:
            postgres:
                image: postgres:latest
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: postgres

                ports:
                    - 5432:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

        steps:
            - name: Set up Node.js
              uses: actions/setup-node@v3

            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.4'
                  extensions: pgsql

            - uses: actions/checkout@v4

            - name: Copy .env
              run: php -r "file_exists('.env') || copy('.env.example', '.env');"

            - name: Install Dependencies
              run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

            - name: Install node dependencies
              run: npm ci

            - name: Generate key
              run: php artisan key:generate

            - name: Generate Reverb Keys
              run: php artisan reverb:generate

            - name: Directory Permissions
              run: chmod -R 777 storage bootstrap/cache

            - name: Run Migration
              run: php artisan migrate -v
              env:
                  DB_PORT: 5432

            - name: Build
              run: npm run build

            - name: Lint
              run: npm run lint -- --fix

            - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
              run: php artisan test

    # ==========================
    #  Generate Release Tags
    # ==========================
    get-release-tags:
        name: Generate Release Tags
        runs-on: ubuntu-latest
        needs: [laravel-tests]
        if: success()
        outputs:
            tag: ${{ steps.set_release_info.outputs.TAG }}
            docker-tag: ${{ steps.set_release_info.outputs.DOCKER_TAG}}
            prerelease: ${{ steps.set_release_info.outputs.PRERELEASE }}
        steps:
            - name: 读取仓库的内容
              uses: actions/checkout@v4

            - name: Set Release Tag and Prerelease Status
              id: set_release_info
              run: |
                  TIMESTAMP=$(date +%Y%m%d%H%M%S)
                  SHORT_SHA=$(git rev-parse --short HEAD)
                  # Set the tag and prerelease based on the branch or dispatch
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.tag }}" ]]; then
                      echo "TAG=${{ github.event.inputs.tag }}-$TIMESTAMP" >> $GITHUB_OUTPUT
                      echo "DOCKER_TAG=${{ github.event.inputs.tag }}-$TIMESTAMP" >> $GITHUB_OUTPUT
                      echo "PRERELEASE=false" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
                      echo "TAG=beta-$SHORT_SHA" >> $GITHUB_OUTPUT
                      echo "DOCKER_TAG=beta-$SHORT_SHA" >> $GITHUB_OUTPUT
                      echo "PRERELEASE=true" >> $GITHUB_OUTPUT
                  else
                      echo "TAG=latest-$SHORT_SHA" >> $GITHUB_OUTPUT
                      echo "DOCKER_TAG=latest" >> $GITHUB_OUTPUT
                      echo "PRERELEASE=false" >> $GITHUB_OUTPUT
                  fi
    # ==========================
    #  Publish Docker Image
    # ==========================
    build-docker:
        name: Build Docker Image
        runs-on: ubuntu-latest
        needs: [get-release-tags]
        permissions:
            contents: write
        steps:
            - name: 读取仓库的内容
              uses: actions/checkout@v4

            - name: Update .env.docker
              run: |
                  sed -i "s/DOCKER_RELEASE=.*/DOCKER_RELEASE=${{ needs.get-release-tags.outputs.docker-tag }}/" docker/.env.docker

            - name: 登陆 Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_TOKEN }}

            - name: 构建并推送到 Push to Docker Hub
              uses: docker/build-push-action@v5
              with:
                  push: true
                  tags: aminnausin/mediaserver:${{ needs.get-release-tags.outputs.docker-tag }}

    # ==========================
    #  Check for Docker Changes
    # ==========================
    check-docker-changes:
        name: Check for Docker Related File Changes
        needs: [laravel-tests]
        if: needs.laravel-tests.result == 'success'
        runs-on: ubuntu-latest
        outputs:
            files_changed: ${{ steps.filter.outputs.changes != '[]' }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Check for file changes
              id: filter
              uses: dorny/paths-filter@v2
              with:
                  filters: |
                      changed:
                          - 'docker/**'
                          - 'docker-compose.yaml'
                          - 'DockerFile'
                          - 'startDocker.*'
                          - 'data/**'
                          - 'README.md'

    # ==========================
    #  Release Docker Setup Pkg
    # ==========================
    release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        needs: [build-docker, check-docker-changes, get-release-tags]
        if: needs.check-docker-changes.outputs.files_changed == 'true' || github.event_name == 'workflow_dispatch'
        permissions:
            contents: write
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Zip Files Linux
              run: |
                  zip -r mediaServerDockerLinux.zip ./docker/etc ./docker/.env.docker ./docker-compose.yaml ./startDocker.sh ./README.md ./data/*

            - name: Zip Files Windows
              run: |
                  zip -r mediaServerDockerWindows.zip ./docker/etc ./docker/.env.docker ./docker-compose.yaml ./startDocker.bat ./README.md ./data/*
            - name: Create Release
              uses: ncipollo/release-action@v1
              with:
                  allowUpdates: false
                  token: ${{ secrets.GITHUB_TOKEN }}
                  tag: ${{ needs.get-release-tags.outputs.tag }}
                  name: Docker Release - ${{ needs.get-release-tags.outputs.tag }}
                  draft: false
                  prerelease: ${{ needs.get-release-tags.outputs.prerelease }}
                  artifacts: mediaServerDockerLinux.zip,mediaServerDockerWindows.zip
